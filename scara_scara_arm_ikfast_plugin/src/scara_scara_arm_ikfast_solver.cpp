/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-06-26 18:45:50.554749
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5;
x0=IKcos(j[1]);
x1=IKsin(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[2]);
x4=((0.157)*x0);
x5=((0.157)*x2);
eetrans[0]=((0.16015)+(((-1.0)*x1*x5))+(((0.18265)*x0))+((x3*x4)));
eetrans[1]=(((x1*x4))+(((0.18265)*x2))+((x3*x5)));
eetrans[2]=((-0.1122)+j[0]);
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((-0.16015)+px);
new_py=py;
new_pz=((-0.0168)+pz);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=((0.129)+pz);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=((-1.30162666231925)+(((17.4361531661439)*(py*py)))+(((17.4361531661439)*(px*px)))+(((17.4361531661439)*(pz*pz)))+(((17.4361531661439)*(j0*j0)))+(((-34.8723063322877)*j0*pz)));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x6=py*py;
IkReal x7=px*px;
IkReal x8=((157.0)*px);
IkReal x9=((157.0)*py);
j1eval[0]=(x7+x6);
j1eval[1]=((IKabs((((sj2*x9))+((cj2*x8))+(((182.65)*px)))))+(IKabs(((((-1.0)*sj2*x8))+((cj2*x9))+(((182.65)*py))))));
j1eval[2]=IKsign(((((1000.0)*x6))+(((1000.0)*x7))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x10=(cj2*py);
IkReal x11=(px*sj2);
j1eval[0]=((((1.16337579617834)*py))+x11+x10);
j1eval[1]=((IKabs(((((28.67605)*sj2))+(((1000.0)*px*py))+(((24.649)*cj2*sj2)))))+(IKabs(((33.3610225)+(((-1000.0)*(px*px)))+(((57.3521)*cj2))+(((24.649)*(cj2*cj2)))))));
j1eval[2]=IKsign(((((157.0)*x10))+(((157.0)*x11))+(((182.65)*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((((1.16337579617834)*px))+((cj2*px))+(((-1.0)*py*sj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x12=px*px;
IkReal x13=((py*py)+x12);
IkReal x21 = x13;
if(IKabs(x21)==0){
continue;
}
IkReal x14=pow(x21,-0.5);
if((x13) < -0.00001)
continue;
IkReal x15=IKabs(IKsqrt(x13));
IkReal x16=(py*x14);
CheckValue<IkReal> x22=IKPowWithIntegerCheck(x15,-1);
if(!x22.valid){
continue;
}
IkReal x17=x22.value;
IkReal x18=((1.16337579617834)*px*x17);
if((((1.0)+(((-1.3534432431336)*x12*(x17*x17))))) < -0.00001)
continue;
IkReal x19=IKsqrt(((1.0)+(((-1.3534432431336)*x12*(x17*x17)))));
IkReal x20=((1.0)*x19);
if( (x18) < -1-IKFAST_SINCOS_THRESH || (x18) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x23 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x23.valid){
continue;
}
IkReal gconst0=((((-1.0)*(IKasin(x18))))+(((-1.0)*(x23.value))));
IkReal gconst1=((((-1.0)*px*x14*x20))+((x16*x18)));
IkReal gconst2=((((-1.16337579617834)*x12*x14*x17))+(((-1.0)*x16*x20)));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x24=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x24.valid){
continue;
}
if( (((1.16337579617834)*px*(x24.value))) < -1-IKFAST_SINCOS_THRESH || (((1.16337579617834)*px*(x24.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x25 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x25.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((1.16337579617834)*px*(x24.value))))+(x25.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x26=px*px;
CheckValue<IkReal> x36 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x36.valid){
continue;
}
IkReal x27=((1.0)*(x36.value));
IkReal x28=x13;
IkReal x37 = x28;
if(IKabs(x37)==0){
continue;
}
IkReal x29=pow(x37,-0.5);
if((x28) < -0.00001)
continue;
IkReal x30=IKabs(IKsqrt(x28));
IkReal x31=((1.16337579617834)*x29);
CheckValue<IkReal> x38=IKPowWithIntegerCheck(x30,-1);
if(!x38.valid){
continue;
}
IkReal x32=x38.value;
IkReal x33=(px*x32);
if((((1.0)+(((-1.3534432431336)*x26*(x32*x32))))) < -0.00001)
continue;
IkReal x34=IKsqrt(((1.0)+(((-1.3534432431336)*x26*(x32*x32)))));
IkReal x35=((1.0)*x29*x34);
sj2=gconst1;
cj2=gconst2;
if( (((1.1633758)*x33)) < -1-IKFAST_SINCOS_THRESH || (((1.1633758)*x33)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*x27))+(((-1.0)*(IKasin(((1.1633758)*x33))))));
if( (((1.16337579617834)*x33)) < -1-IKFAST_SINCOS_THRESH || (((1.16337579617834)*x33)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*x27))+(((-1.0)*(IKasin(((1.16337579617834)*x33))))));
IkReal gconst1=(((py*x31*x33))+(((-1.0)*px*x35)));
IkReal gconst2=((((-1.0)*py*x35))+(((-1.0)*x26*x31*x32)));
IkReal x39=py*py;
IkReal x40=px*px;
j1eval[0]=(x39+x40);
j1eval[1]=IKsign(((((1000.0)*x40))+(((1000.0)*x39))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x41 = IKatan2WithCheck(IkReal(((33.3610225)+(((24.649)*(gconst2*gconst2)))+(((-1000.0)*(px*px)))+(((57.3521)*gconst2)))),IkReal(((((1000.0)*px*py))+(((28.67605)*gconst1))+(((24.649)*gconst1*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x41.valid){
continue;
}
CheckValue<IkReal> x42=IKPowWithIntegerCheck(IKsign(((((157.0)*gconst2*py))+(((157.0)*gconst1*px))+(((182.65)*py)))),-1);
if(!x42.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x41.value)+(((1.5707963267949)*(x42.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x43=IKcos(j1);
IkReal x44=IKsin(j1);
IkReal x45=((0.157)*gconst1);
IkReal x46=((1.0)*py);
IkReal x47=((0.157)*gconst2);
IkReal x48=(px*x43);
evalcond[0]=((((-1.0)*x43*x46))+x45+((px*x44)));
evalcond[1]=((0.18265)+(((-1.0)*x48))+(((-1.0)*x44*x46))+x47);
evalcond[2]=(((x43*x47))+(((-1.0)*px))+(((-1.0)*x44*x45))+(((0.18265)*x43)));
evalcond[3]=((((-1.0)*x46))+((x43*x45))+((x44*x47))+(((0.18265)*x44)));
evalcond[4]=((-0.0087120225)+(((-1.0)*(px*px)))+(((-1.0)*py*x46))+(((0.3653)*py*x44))+(((0.3653)*x48)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x49=((157.0)*px);
IkReal x50=((157.0)*py);
CheckValue<IkReal> x51=IKPowWithIntegerCheck(IKsign(((((1000.0)*(py*py)))+(((1000.0)*(px*px))))),-1);
if(!x51.valid){
continue;
}
CheckValue<IkReal> x52 = IKatan2WithCheck(IkReal((((gconst2*x50))+(((-1.0)*gconst1*x49))+(((182.65)*py)))),IkReal((((gconst2*x49))+((gconst1*x50))+(((182.65)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x51.value)))+(x52.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x53=IKcos(j1);
IkReal x54=IKsin(j1);
IkReal x55=((0.157)*gconst1);
IkReal x56=((1.0)*py);
IkReal x57=((0.157)*gconst2);
IkReal x58=(px*x53);
evalcond[0]=((((-1.0)*x53*x56))+((px*x54))+x55);
evalcond[1]=((0.18265)+(((-1.0)*x54*x56))+x57+(((-1.0)*x58)));
evalcond[2]=((((-1.0)*x54*x55))+(((-1.0)*px))+(((0.18265)*x53))+((x53*x57)));
evalcond[3]=((((0.18265)*x54))+((x53*x55))+(((-1.0)*x56))+((x54*x57)));
evalcond[4]=((-0.0087120225)+(((-1.0)*(px*px)))+(((0.3653)*py*x54))+(((0.3653)*x58))+(((-1.0)*py*x56)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x59=px*px;
IkReal x60=((py*py)+x59);
IkReal x68 = x60;
if(IKabs(x68)==0){
continue;
}
IkReal x61=pow(x68,-0.5);
if((x60) < -0.00001)
continue;
IkReal x62=IKabs(IKsqrt(x60));
IkReal x63=(py*x61);
CheckValue<IkReal> x69=IKPowWithIntegerCheck(x62,-1);
if(!x69.valid){
continue;
}
IkReal x64=x69.value;
IkReal x65=((1.16337579617834)*px*x64);
if((((1.0)+(((-1.3534432431336)*x59*(x64*x64))))) < -0.00001)
continue;
IkReal x66=IKsqrt(((1.0)+(((-1.3534432431336)*x59*(x64*x64)))));
IkReal x67=((1.0)*x66);
if( (x65) < -1-IKFAST_SINCOS_THRESH || (x65) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x70.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(IKasin(x65))+(((-1.0)*(x70.value))));
IkReal gconst4=(((px*x61*x67))+((x63*x65)));
IkReal gconst5=((((-1.16337579617834)*x59*x61*x64))+((x63*x67)));
CheckValue<IkReal> x71 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x71.valid){
continue;
}
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x72=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x72.valid){
continue;
}
if( (((1.16337579617834)*px*(x72.value))) < -1-IKFAST_SINCOS_THRESH || (((1.16337579617834)*px*(x72.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x71.value)+(((-1.0)*(IKasin(((1.16337579617834)*px*(x72.value))))))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x73=px*px;
CheckValue<IkReal> x83 = IKatan2WithCheck(IkReal(px),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x83.valid){
continue;
}
IkReal x74=((1.0)*(x83.value));
IkReal x75=x60;
IkReal x84 = x75;
if(IKabs(x84)==0){
continue;
}
IkReal x76=pow(x84,-0.5);
if((x75) < -0.00001)
continue;
IkReal x77=IKabs(IKsqrt(x75));
IkReal x78=((1.16337579617834)*x76);
CheckValue<IkReal> x85=IKPowWithIntegerCheck(x77,-1);
if(!x85.valid){
continue;
}
IkReal x79=x85.value;
IkReal x80=(px*x79);
if((((1.0)+(((-1.3534432431336)*x73*(x79*x79))))) < -0.00001)
continue;
IkReal x81=IKsqrt(((1.0)+(((-1.3534432431336)*x73*(x79*x79)))));
IkReal x82=((1.0)*x76*x81);
sj2=gconst4;
cj2=gconst5;
if( (((1.1633758)*x80)) < -1-IKFAST_SINCOS_THRESH || (((1.1633758)*x80)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((3.14159265)+(((-1.0)*x74))+(IKasin(((1.1633758)*x80))));
if( (((1.16337579617834)*x80)) < -1-IKFAST_SINCOS_THRESH || (((1.16337579617834)*x80)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(IKasin(((1.16337579617834)*x80)))+(((-1.0)*x74)));
IkReal gconst4=(((py*x78*x80))+((px*x82)));
IkReal gconst5=((((-1.0)*x73*x78*x79))+((py*x82)));
IkReal x86=py*py;
IkReal x87=px*px;
j1eval[0]=(x86+x87);
j1eval[1]=IKsign(((((1000.0)*x87))+(((1000.0)*x86))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x88=IKPowWithIntegerCheck(IKsign(((((157.0)*gconst5*py))+(((157.0)*gconst4*px))+(((182.65)*py)))),-1);
if(!x88.valid){
continue;
}
CheckValue<IkReal> x89 = IKatan2WithCheck(IkReal(((33.3610225)+(((-1000.0)*(px*px)))+(((24.649)*(gconst5*gconst5)))+(((57.3521)*gconst5)))),IkReal(((((24.649)*gconst4*gconst5))+(((1000.0)*px*py))+(((28.67605)*gconst4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x89.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x88.value)))+(x89.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x90=IKcos(j1);
IkReal x91=IKsin(j1);
IkReal x92=((0.157)*gconst5);
IkReal x93=((1.0)*py);
IkReal x94=((0.157)*gconst4);
IkReal x95=((0.157)*x90);
IkReal x96=(px*x90);
evalcond[0]=((((-1.0)*x90*x93))+x94+((px*x91)));
evalcond[1]=((0.18265)+(((-1.0)*x91*x93))+x92+(((-1.0)*x96)));
evalcond[2]=((((-1.0)*x91*x94))+(((-1.0)*px))+((x90*x92))+(((0.18265)*x90)));
evalcond[3]=(((x90*x94))+(((-1.0)*x93))+(((0.18265)*x91))+((x91*x92)));
evalcond[4]=((-0.0087120225)+(((-1.0)*(px*px)))+(((0.3653)*py*x91))+(((-1.0)*py*x93))+(((0.3653)*x96)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x97=((157.0)*gconst4);
IkReal x98=((157.0)*gconst5);
CheckValue<IkReal> x99=IKPowWithIntegerCheck(IKsign(((((1000.0)*(py*py)))+(((1000.0)*(px*px))))),-1);
if(!x99.valid){
continue;
}
CheckValue<IkReal> x100 = IKatan2WithCheck(IkReal((((py*x98))+(((-1.0)*px*x97))+(((182.65)*py)))),IkReal((((py*x97))+((px*x98))+(((182.65)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x100.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x99.value)))+(x100.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x101=IKcos(j1);
IkReal x102=IKsin(j1);
IkReal x103=((0.157)*gconst5);
IkReal x104=((1.0)*py);
IkReal x105=((0.157)*gconst4);
IkReal x106=((0.157)*x101);
IkReal x107=(px*x101);
evalcond[0]=((((-1.0)*x101*x104))+x105+((px*x102)));
evalcond[1]=((0.18265)+x103+(((-1.0)*x102*x104))+(((-1.0)*x107)));
evalcond[2]=((((0.18265)*x101))+(((-1.0)*px))+(((-1.0)*x102*x105))+((x101*x103)));
evalcond[3]=((((0.18265)*x102))+(((-1.0)*x104))+((x102*x103))+((x101*x105)));
evalcond[4]=((-0.0087120225)+(((0.3653)*py*x102))+(((-1.0)*(px*px)))+(((0.3653)*x107))+(((-1.0)*py*x104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x108=py*py;
IkReal x109=((px*px)+x108);
IkReal x116 = x109;
if(IKabs(x116)==0){
continue;
}
IkReal x110=pow(x116,-0.5);
if((x109) < -0.00001)
continue;
IkReal x111=IKabs(IKsqrt(x109));
IkReal x112=(px*x110);
CheckValue<IkReal> x117=IKPowWithIntegerCheck(x111,-1);
if(!x117.valid){
continue;
}
IkReal x113=x117.value;
IkReal x114=((1.16337579617834)*x113);
if((((1.0)+(((-1.3534432431336)*x108*(x113*x113))))) < -0.00001)
continue;
IkReal x115=IKsqrt(((1.0)+(((-1.3534432431336)*x108*(x113*x113)))));
if( ((py*x114)) < -1-IKFAST_SINCOS_THRESH || ((py*x114)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x118 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x118.valid){
continue;
}
IkReal gconst6=((((-1.0)*(IKasin((py*x114)))))+(((-1.0)*(x118.value))));
IkReal gconst7=((((-1.0)*py*x112*x114))+(((-1.0)*py*x110*x115)));
IkReal gconst8=(((x112*x115))+(((-1.0)*x108*x110*x114)));
CheckValue<IkReal> x119 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x119.valid){
continue;
}
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x120=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x120.valid){
continue;
}
if( (((1.16337579617834)*py*(x120.value))) < -1-IKFAST_SINCOS_THRESH || (((1.16337579617834)*py*(x120.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x119.value)+(IKasin(((1.16337579617834)*py*(x120.value))))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x121=py*py;
CheckValue<IkReal> x130 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x130.valid){
continue;
}
IkReal x122=((1.0)*(x130.value));
IkReal x123=x109;
IkReal x131 = x123;
if(IKabs(x131)==0){
continue;
}
IkReal x124=pow(x131,-0.5);
if((x123) < -0.00001)
continue;
IkReal x125=IKabs(IKsqrt(x123));
IkReal x126=(px*x124);
CheckValue<IkReal> x132=IKPowWithIntegerCheck(x125,-1);
if(!x132.valid){
continue;
}
IkReal x127=x132.value;
IkReal x128=((1.16337579617834)*x127);
if((((1.0)+(((-1.3534432431336)*x121*(x127*x127))))) < -0.00001)
continue;
IkReal x129=IKsqrt(((1.0)+(((-1.3534432431336)*x121*(x127*x127)))));
sj2=gconst7;
cj2=gconst8;
if( (((1.1633758)*py*x127)) < -1-IKFAST_SINCOS_THRESH || (((1.1633758)*py*x127)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*(IKasin(((1.1633758)*py*x127)))))+(((-1.0)*x122)));
if( ((py*x128)) < -1-IKFAST_SINCOS_THRESH || ((py*x128)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst6=((((-1.0)*x122))+(((-1.0)*(IKasin((py*x128))))));
IkReal gconst7=((((-1.0)*py*x124*x129))+(((-1.0)*py*x126*x128)));
IkReal gconst8=(((x126*x129))+(((-1.0)*x121*x124*x128)));
IkReal x133=py*py;
IkReal x134=px*px;
j1eval[0]=(x134+x133);
j1eval[1]=IKsign(((((1000.0)*x134))+(((1000.0)*x133))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x135 = IKatan2WithCheck(IkReal(((((-24.649)*gconst7*gconst8))+(((-28.67605)*gconst7))+(((1000.0)*px*py)))),IkReal(((33.3610225)+(((24.649)*(gconst8*gconst8)))+(((-1000.0)*(py*py)))+(((57.3521)*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x135.valid){
continue;
}
CheckValue<IkReal> x136=IKPowWithIntegerCheck(IKsign(((((157.0)*gconst8*px))+(((-157.0)*gconst7*py))+(((182.65)*px)))),-1);
if(!x136.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x135.value)+(((1.5707963267949)*(x136.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x137=IKcos(j1);
IkReal x138=IKsin(j1);
IkReal x139=((1.0)*py);
IkReal x140=((0.157)*gconst7);
IkReal x141=((0.157)*gconst8);
IkReal x142=(px*x137);
evalcond[0]=(((px*x138))+(((-1.0)*x137*x139))+x140);
evalcond[1]=((0.18265)+(((-1.0)*x138*x139))+x141+(((-1.0)*x142)));
evalcond[2]=((((0.18265)*x137))+(((-1.0)*x138*x140))+((x137*x141))+(((-1.0)*px)));
evalcond[3]=((((0.18265)*x138))+((x137*x140))+((x138*x141))+(((-1.0)*x139)));
evalcond[4]=((-0.0087120225)+(((-1.0)*(px*px)))+(((0.3653)*py*x138))+(((-1.0)*py*x139))+(((0.3653)*x142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x143=((157.0)*px);
IkReal x144=((157.0)*py);
CheckValue<IkReal> x145 = IKatan2WithCheck(IkReal(((((-1.0)*gconst7*x143))+((gconst8*x144))+(((182.65)*py)))),IkReal((((gconst8*x143))+((gconst7*x144))+(((182.65)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x145.valid){
continue;
}
CheckValue<IkReal> x146=IKPowWithIntegerCheck(IKsign(((((1000.0)*(py*py)))+(((1000.0)*(px*px))))),-1);
if(!x146.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x145.value)+(((1.5707963267949)*(x146.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x147=IKcos(j1);
IkReal x148=IKsin(j1);
IkReal x149=((1.0)*py);
IkReal x150=((0.157)*gconst7);
IkReal x151=((0.157)*gconst8);
IkReal x152=(px*x147);
evalcond[0]=(x150+(((-1.0)*x147*x149))+((px*x148)));
evalcond[1]=((0.18265)+x151+(((-1.0)*x148*x149))+(((-1.0)*x152)));
evalcond[2]=((((0.18265)*x147))+(((-1.0)*px))+(((-1.0)*x148*x150))+((x147*x151)));
evalcond[3]=((((-1.0)*x149))+(((0.18265)*x148))+((x147*x150))+((x148*x151)));
evalcond[4]=((-0.0087120225)+(((-1.0)*(px*px)))+(((-1.0)*py*x149))+(((0.3653)*x152))+(((0.3653)*py*x148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x153=py*py;
IkReal x154=((px*px)+x153);
if((x154) < -0.00001)
continue;
IkReal x155=IKabs(IKsqrt(x154));
IkReal x162 = x154;
if(IKabs(x162)==0){
continue;
}
IkReal x156=pow(x162,-0.5);
IkReal x157=(py*x156);
CheckValue<IkReal> x163=IKPowWithIntegerCheck(x155,-1);
if(!x163.valid){
continue;
}
IkReal x158=x163.value;
IkReal x159=((1.16337579617834)*x158);
if((((1.0)+(((-1.3534432431336)*x153*(x158*x158))))) < -0.00001)
continue;
IkReal x160=IKsqrt(((1.0)+(((-1.3534432431336)*x153*(x158*x158)))));
IkReal x161=((1.0)*x160);
CheckValue<IkReal> x164 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x164.valid){
continue;
}
if( ((py*x159)) < -1-IKFAST_SINCOS_THRESH || ((py*x159)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x164.value)))+(IKasin((py*x159))));
IkReal gconst10=(((x157*x161))+(((-1.0)*px*x157*x159)));
IkReal gconst11=((((-1.0)*px*x156*x161))+(((-1.0)*x153*x156*x159)));
CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x165.valid){
continue;
}
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x166=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x166.valid){
continue;
}
if( (((1.16337579617834)*py*(x166.value))) < -1-IKFAST_SINCOS_THRESH || (((1.16337579617834)*py*(x166.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x165.value)+(((-1.0)*(IKasin(((1.16337579617834)*py*(x166.value))))))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x167=py*py;
CheckValue<IkReal> x177 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x177.valid){
continue;
}
IkReal x168=((1.0)*(x177.value));
IkReal x169=x154;
if((x169) < -0.00001)
continue;
IkReal x170=IKabs(IKsqrt(x169));
IkReal x178 = x169;
if(IKabs(x178)==0){
continue;
}
IkReal x171=pow(x178,-0.5);
IkReal x172=(py*x171);
CheckValue<IkReal> x179=IKPowWithIntegerCheck(x170,-1);
if(!x179.valid){
continue;
}
IkReal x173=x179.value;
IkReal x174=((1.16337579617834)*x173);
if((((1.0)+(((-1.3534432431336)*x167*(x173*x173))))) < -0.00001)
continue;
IkReal x175=IKsqrt(((1.0)+(((-1.3534432431336)*x167*(x173*x173)))));
IkReal x176=((1.0)*x175);
sj2=gconst10;
cj2=gconst11;
if( (((1.1633758)*py*x173)) < -1-IKFAST_SINCOS_THRESH || (((1.1633758)*py*x173)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((3.14159265)+(((-1.0)*x168))+(IKasin(((1.1633758)*py*x173))));
if( ((py*x174)) < -1-IKFAST_SINCOS_THRESH || ((py*x174)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst9=((3.14159265358979)+(IKasin((py*x174)))+(((-1.0)*x168)));
IkReal gconst10=(((x172*x176))+(((-1.0)*px*x172*x174)));
IkReal gconst11=((((-1.0)*px*x171*x176))+(((-1.0)*x167*x171*x174)));
IkReal x180=py*py;
IkReal x181=px*px;
j1eval[0]=(x180+x181);
j1eval[1]=IKsign(((((1000.0)*x180))+(((1000.0)*x181))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x182=IKPowWithIntegerCheck(IKsign(((((157.0)*gconst10*px))+(((157.0)*gconst11*py))+(((182.65)*py)))),-1);
if(!x182.valid){
continue;
}
CheckValue<IkReal> x183 = IKatan2WithCheck(IkReal(((33.3610225)+(((-1000.0)*(px*px)))+(((57.3521)*gconst11))+(((24.649)*(gconst11*gconst11))))),IkReal(((((28.67605)*gconst10))+(((24.649)*gconst10*gconst11))+(((1000.0)*px*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x183.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x182.value)))+(x183.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x184=IKcos(j1);
IkReal x185=IKsin(j1);
IkReal x186=((0.157)*gconst10);
IkReal x187=((1.0)*py);
IkReal x188=((0.157)*gconst11);
IkReal x189=(px*x184);
evalcond[0]=(x186+(((-1.0)*x184*x187))+((px*x185)));
evalcond[1]=((0.18265)+(((-1.0)*x189))+x188+(((-1.0)*x185*x187)));
evalcond[2]=((((0.18265)*x184))+((x184*x188))+(((-1.0)*px))+(((-1.0)*x185*x186)));
evalcond[3]=((((-1.0)*x187))+(((0.18265)*x185))+((x185*x188))+((x184*x186)));
evalcond[4]=((-0.0087120225)+(((0.3653)*py*x185))+(((-1.0)*(px*px)))+(((-1.0)*py*x187))+(((0.3653)*x189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x190=((157.0)*gconst10);
IkReal x191=((157.0)*gconst11);
CheckValue<IkReal> x192 = IKatan2WithCheck(IkReal(((((-1.0)*px*x190))+(((182.65)*py))+((py*x191)))),IkReal((((px*x191))+(((182.65)*px))+((py*x190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x192.valid){
continue;
}
CheckValue<IkReal> x193=IKPowWithIntegerCheck(IKsign(((((1000.0)*(py*py)))+(((1000.0)*(px*px))))),-1);
if(!x193.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x192.value)+(((1.5707963267949)*(x193.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x194=IKcos(j1);
IkReal x195=IKsin(j1);
IkReal x196=((0.157)*gconst10);
IkReal x197=((1.0)*py);
IkReal x198=((0.157)*gconst11);
IkReal x199=(px*x194);
evalcond[0]=((((-1.0)*x194*x197))+x196+((px*x195)));
evalcond[1]=((0.18265)+(((-1.0)*x195*x197))+(((-1.0)*x199))+x198);
evalcond[2]=((((-1.0)*x195*x196))+(((0.18265)*x194))+(((-1.0)*px))+((x194*x198)));
evalcond[3]=((((-1.0)*x197))+(((0.18265)*x195))+((x195*x198))+((x194*x196)));
evalcond[4]=((-0.0087120225)+(((-1.0)*(px*px)))+(((-1.0)*py*x197))+(((0.3653)*x199))+(((0.3653)*py*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x200=(py*sj2);
IkReal x201=(cj2*px);
CheckValue<IkReal> x202=IKPowWithIntegerCheck(((((157.0)*x201))+(((-157.0)*x200))+(((182.65)*px))),-1);
if(!x202.valid){
continue;
}
CheckValue<IkReal> x203=IKPowWithIntegerCheck(((((182650.0)*px))+(((-157000.0)*x200))+(((157000.0)*x201))),-1);
if(!x203.valid){
continue;
}
if( IKabs(((x202.value)*(((((-28.67605)*sj2))+(((-24.649)*cj2*sj2))+(((1000.0)*px*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x203.value)*(((-24649.0)+(((24649.0)*(cj2*cj2)))+(((1000000.0)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x202.value)*(((((-28.67605)*sj2))+(((-24.649)*cj2*sj2))+(((1000.0)*px*py))))))+IKsqr(((x203.value)*(((-24649.0)+(((24649.0)*(cj2*cj2)))+(((1000000.0)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x202.value)*(((((-28.67605)*sj2))+(((-24.649)*cj2*sj2))+(((1000.0)*px*py))))), ((x203.value)*(((-24649.0)+(((24649.0)*(cj2*cj2)))+(((1000000.0)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x204=IKcos(j1);
IkReal x205=IKsin(j1);
IkReal x206=((0.157)*cj2);
IkReal x207=((1.0)*py);
IkReal x208=((1.0)*px);
IkReal x209=((0.157)*sj2);
evalcond[0]=((((-1.0)*x204*x207))+((px*x205))+x209);
evalcond[1]=((0.18265)+(((-1.0)*x204*x208))+x206+(((-1.0)*x205*x207)));
evalcond[2]=((((0.18265)*x204))+(((-1.0)*x208))+((x204*x206))+(((-1.0)*x205*x209)));
evalcond[3]=(((x205*x206))+(((0.18265)*x205))+(((-1.0)*x207))+((x204*x209)));
evalcond[4]=((0.0079289775)+(((-1.0)*px*x208))+(((-1.0)*py*x207))+(((-1.0)*(j0*j0)))+(((2.0)*j0*pz))+(((-1.0)*(pz*pz)))+(((0.3653)*px*x204))+(((0.3653)*py*x205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal(((33.3610225)+(((-1000.0)*(px*px)))+(((57.3521)*cj2))+(((24.649)*(cj2*cj2))))),IkReal(((((28.67605)*sj2))+(((1000.0)*px*py))+(((24.649)*cj2*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x210.valid){
continue;
}
CheckValue<IkReal> x211=IKPowWithIntegerCheck(IKsign(((((157.0)*px*sj2))+(((157.0)*cj2*py))+(((182.65)*py)))),-1);
if(!x211.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x210.value)+(((1.5707963267949)*(x211.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x212=IKcos(j1);
IkReal x213=IKsin(j1);
IkReal x214=((0.157)*cj2);
IkReal x215=((1.0)*py);
IkReal x216=((1.0)*px);
IkReal x217=((0.157)*sj2);
evalcond[0]=(x217+((px*x213))+(((-1.0)*x212*x215)));
evalcond[1]=((0.18265)+x214+(((-1.0)*x213*x215))+(((-1.0)*x212*x216)));
evalcond[2]=(((x212*x214))+(((-1.0)*x213*x217))+(((-1.0)*x216))+(((0.18265)*x212)));
evalcond[3]=(((x213*x214))+((x212*x217))+(((-1.0)*x215))+(((0.18265)*x213)));
evalcond[4]=((0.0079289775)+(((-1.0)*py*x215))+(((0.3653)*py*x213))+(((-1.0)*px*x216))+(((-1.0)*(j0*j0)))+(((2.0)*j0*pz))+(((-1.0)*(pz*pz)))+(((0.3653)*px*x212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x218=((157.0)*px);
IkReal x219=((157.0)*py);
CheckValue<IkReal> x220=IKPowWithIntegerCheck(IKsign(((((1000.0)*(py*py)))+(((1000.0)*(px*px))))),-1);
if(!x220.valid){
continue;
}
CheckValue<IkReal> x221 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x218))+((cj2*x219))+(((182.65)*py)))),IkReal((((sj2*x219))+((cj2*x218))+(((182.65)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x221.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x220.value)))+(x221.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x222=IKcos(j1);
IkReal x223=IKsin(j1);
IkReal x224=((0.157)*cj2);
IkReal x225=((1.0)*py);
IkReal x226=((1.0)*px);
IkReal x227=((0.157)*sj2);
evalcond[0]=((((-1.0)*x222*x225))+x227+((px*x223)));
evalcond[1]=((0.18265)+(((-1.0)*x222*x226))+x224+(((-1.0)*x223*x225)));
evalcond[2]=(((x222*x224))+(((-1.0)*x223*x227))+(((0.18265)*x222))+(((-1.0)*x226)));
evalcond[3]=(((x222*x227))+((x223*x224))+(((0.18265)*x223))+(((-1.0)*x225)));
evalcond[4]=((0.0079289775)+(((0.3653)*py*x223))+(((0.3653)*px*x222))+(((-1.0)*(j0*j0)))+(((2.0)*j0*pz))+(((-1.0)*py*x225))+(((-1.0)*(pz*pz)))+(((-1.0)*px*x226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "1c29a9f7f4be055605f53cbe2b63a2d2"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
